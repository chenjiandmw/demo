//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use async_trait::async_trait;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub username: Option<String>,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub password: Option<String>,
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub age: Option<u64>,
    #[sea_orm(unique)]
    pub bj: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        // println!("id changed: {}", self.id.is_unchanged());
        // println!("password changed: {}", self.password.is_not_set());
        match self.bj.as_ref() {
            Some(bj) => {
                if *bj <= 0 {
                    Err(DbErr::Custom(format!(
                        "[before_save] bj 值 必须大于 10, insert: {}",
                        insert
                    )))
                } else {
                    Ok(self)
                }
            }
            None => Ok(self),
        }
    }

    async fn after_save<C>(
        model: <Self::Entity as EntityTrait>::Model,
        _db: &C,
        insert: bool,
    ) -> Result<<Self::Entity as EntityTrait>::Model, DbErr>
    where
        C: ConnectionTrait,
    {
        // println!("[after_save] insert: {} model: {:#?}", insert, model);
        Ok(model)
    }
}
